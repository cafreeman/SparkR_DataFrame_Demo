{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "sectionjgCAxE",
            "type": "section",
            "title": "Initialize SparkR",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "codeizeza2",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "library(SparkR)",
                    "sc <- sparkR.init(\"local[*]\")",
                    "sqlCtx <- sparkRSQL.init(sc)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 8327,
                "dataresult": "ERROR: invalid object type jobj"
            },
            "evaluatorReader": false,
            "lineCount": 3,
            "initialization": true
        },
        {
            "id": "sectionmUAEm1",
            "type": "section",
            "title": "Creating DataFrames",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "sectionEhJ1hB",
            "type": "section",
            "title": "From a local data.frame",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "code1pmLdM",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "irisDF <- createDataFrame(sqlCtx, iris)",
                    "printSchema(irisDF)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 692,
                "dataresult": "ERROR: invalid object type NULL"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "sectionOVubkw",
            "type": "section",
            "title": "Or from raw data using a schema",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeiQmNfe",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "listOfLists <- list(list(1, 2, 3),",
                    "                    list(\"a\",\"b\",\"c\"),",
                    "                    list(1.2, 3.4, 5.6))",
                    "schema <- structType(structField(\"col1\", \"integer\"),",
                    "                     structField(\"col2\", \"string\"),",
                    "                     structField(\"col3\", \"numeric\"))",
                    "head(newDF <- createDataFrame(sqlCtx, listOfLists, schema))",
                    "printSchema(newDF)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 1385,
                "dataresult": "ERROR: invalid object type NULL"
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "sectionSjvzgB",
            "type": "section",
            "title": "Or from an external data source",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "code0yB6wS",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "",
                    "demo <- read.df(sqlCtx, \"/Users/cfreeman/SparkR/SparkR_DataFrame_Demo/Customer_Demographics.json\", \"json\")",
                    "printSchema(demo)",
                    "head(demo)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 2517
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "sectioncYFU7l",
            "type": "section",
            "title": "Basic DataFrame Operations",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "sectionCmGtEu",
            "type": "section",
            "title": "Reference a specific column with `$`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codelryPrE",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(select(irisDF,irisDF$Species))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 143
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionZ6zJjW",
            "type": "section",
            "title": "Or multiple columns with `[, c(\"foo\", \"bar\")]`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeSgc8NW",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(irisDF[,c(\"Petal_Length\", \"Sepal_Length\")])"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 705
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionoj4D3M",
            "type": "section",
            "title": "Create new columns with `$` or `mutate`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeYUzn9N",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "# Create Petal_Area",
                    "irisDF$Petal_Area <- irisDF$Petal_Length * irisDF$Petal_Width",
                    "# Create Sepal_Area",
                    "head(irisDF <- mutate(irisDF, Sepal_Area = irisDF$Sepal_Length * irisDF$Sepal_Width))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 721
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "sectionM006c3",
            "type": "section",
            "title": "And drop them just as easily!",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeNYGmvb",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "irisDF$Petal_Area <- NULL",
                    "head(irisDF)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 675
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "sectionxMlDOH",
            "type": "section",
            "title": "Filter on a pattern with `like`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeNrlekt",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(filter(demo, like(demo$age, \"40to44\")))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 145,
                "dataresult": [
                    4500
                ]
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionYgZ6cz",
            "type": "section",
            "title": "Count records of a certain type with `where`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "code2a9RWB",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(count(where(demo, demo$region == \"Pacific\")))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 1216,
                "dataresult": [
                    4500
                ]
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionIZ38Y0",
            "type": "section",
            "title": "Sort on a specific column with `arrange`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "code15bqyk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "showDF(arrange(demo, demo$income), 25)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 829,
                "dataresult": "ERROR: invalid object type NULL"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionUqeaKC",
            "type": "section",
            "title": "Aggregations",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "sectionvXkqiE",
            "type": "section",
            "title": "First, let's load up some transaction data",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeHNl1a1",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "txnsRaw <- read.df(sqlCtx, \"/Users/cfreeman/SparkR/SparkR_DataFrame_Demo/Customer_Transactions.json\", \"json\")",
                    "printSchema(txnsRaw)",
                    "head(txnsRaw)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 2102
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "sectionbI9rkM",
            "type": "section",
            "title": "Grouped Data using `groupBy`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codedwzgPb",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "groupByCustomer <- groupBy(txnsRaw, txnsRaw$cust_id)",
                    "class(groupByCustomer)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 113,
                "dataresult": [
                    "GroupedData"
                ]
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "sectiontKWhga",
            "type": "section",
            "title": "Aggregate data using `summarize`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeXDueGu",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(perCustomer <- summarize(groupByCustomer,",
                    "                              txns = countDistinct(txnsRaw$day_num),",
                    "                              spend = sum(txnsRaw$extended_price)))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 5689
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "sectionamVgsf",
            "type": "section",
            "title": "View summary stats with using `describe`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codenwZNUI",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(describe(perCustomer, \"txns\", \"spend\"))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 7348,
                "dataresult": "ERROR: invalid object type DataFrame"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionrWerBo",
            "type": "section",
            "title": "Joins",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "sectionrC8F9B",
            "type": "section",
            "title": "Basic Join",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codemfo7Fr",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(limit(select(",
                    "                join(perCustomer, demo, perCustomer$cust_id == demo$cust_id),",
                    "                  demo$\"*\",",
                    "                  perCustomer$txns,",
                    "                  perCustomer$spend),",
                    "                10))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 4172
            },
            "evaluatorReader": true,
            "lineCount": 6
        },
        {
            "id": "section4fmJ6D",
            "type": "section",
            "title": "Create a new field with `mutate`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "code1cO7PD",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(limit(mutate(",
                    "             select(",
                    "               join(perCustomer, demo, perCustomer$cust_id == demo$cust_id),",
                    "               demo$\"*\",",
                    "               perCustomer$txns,",
                    "               perCustomer$spend),",
                    "             txnsAboveAverage = perCustomer$txns > as.numeric(first(summarize(perCustomer, mean(perCustomer$txns))))),               ",
                    "           10))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 8145
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "section8fqpmv",
            "type": "section",
            "title": "All of these nested functions are kind of a drag...",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "codeN5PTLl",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "library(magrittr)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 105,
                "dataresult": [
                    "magrittr",
                    "SparkR",
                    "beaker",
                    "RJSONIO",
                    "RCurl",
                    "bitops",
                    "methods",
                    "Rserve",
                    "stats",
                    "graphics",
                    "grDevices",
                    "utils",
                    "datasets",
                    "base"
                ]
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionybr3tB",
            "type": "section",
            "title": "Let's try that again",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeJruWwB",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "customerData <- perCustomer %>%",
                    "                  join(demo, .$cust_id == demo$cust_id) %>%",
                    "                  select(demo$\"*\", perCustomer$txns, perCustomer$spend) %>%",
                    "                  {",
                    "                    txnsAvg <- summarize(., mean(.$txns)) %>% first %>% as.numeric",
                    "                    mutate(., txnsAboveAverage = .$txns > txnsAvg)",
                    "                  }",
                    "head(customerData)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 7504,
                "dataresult": "ERROR: invalid object type DataFrame"
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "section1sAeaO",
            "type": "section",
            "title": "Bonus: DataFrame Pipelines!",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "codeb0n1gl",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "sample <- read.df(sqlCtx, \"/Users/cfreeman/SparkR/SparkR_DataFrame_Demo/DM_Sample.json/\", \"json\")",
                    "printSchema(sample)",
                    "count(sample)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 758,
                "dataresult": [
                    2000
                ]
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "sectionJPvwyx",
            "type": "section",
            "title": "Use a single pipeline to perform a series of transformations and create multiple new DataFrames",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "codedgVULD",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "customerData %>%",
                    "  join(sample, .$cust_id == sample$cust_id, \"left_outer\") %T>% {",
                    "    # Create training data",
                    "    filter(., isNull(sample$cust_id)) %>%",
                    "      select(customerData$\"*\") ->> trainDF",
                    "    # Create test data",
                    "    filter(., isNotNull(sample$cust_id)) %>%",
                    "      select(customerData$\"*\", sample$respondYes) ->> testDF",
                    "  }",
                    " head(trainDF)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 14270,
                "dataresult": "ERROR: invalid object type DataFrame"
            },
            "evaluatorReader": true,
            "lineCount": 10
        },
        {
            "id": "codeJBz4hi",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "explain(testDF)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 87,
                "dataresult": "ERROR: invalid object type NULL"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "code2jgeGo",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "head(testDF)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "766d3d63-b4be-46ea-8f87-766bf35c0727",
                "elapsedTime": 10732
            },
            "evaluatorReader": true,
            "lineCount": 1
        }
    ]
}
